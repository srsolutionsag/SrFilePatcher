<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

namespace srag\Plugins\SrFilePatcher\Access;

use srag\Plugins\SrFilePatcher\Utils\SrFilePatcherTrait;
use srag\DIC\SrFilePatcher\DICTrait;
use ilSrFilePatcherPlugin;
use ilObjectPluginAccess;
use ilUtil;

/**
 * Class Access
 *
 * Generated by srag\PluginGenerator v0.13.7
 *
 * @package srag\Plugins\SrFilePatcher\Access
 *
 * @author  studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author  studer + raimann ag - Team Core 1 <support-core1@studer-raimann.ch>
 */
class Access extends ilObjectPluginAccess
{

    use DICTrait;
    use SrFilePatcherTrait;
    const PLUGIN_CLASS_NAME = ilSrFilePatcherPlugin::class;
    /**
     * @var self
     */
    protected static $instance = null;


    /**
     * @return self
     */
    public static function getInstance() : self
    {
        if (self::$instance === null) {
            self::$instance = new self();
        }

        return self::$instance;
    }


    /**
     * Access constructor
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * @param int $ref_id
     *
     * @return bool
     */
    public static function hasWriteAccess(): bool {
        $ref_id = filter_input(INPUT_GET, "ref_id");
        $uid = self::dic()->user()->getId();

        return self::dic()->access()->checkAccessOfUser($uid, "write", "", $ref_id);
    }


    public static function redirectNonAccess($class, string $cmd = "") {
        ilUtil::sendFailure(self::plugin()->translate("permission_denied"), true);

        if (is_object($class)) {
            self::dic()->ctrl()->clearParameters($class);
            self::dic()->ctrl()->redirect($class, $cmd);
        } else {
            self::dic()->ctrl()->clearParametersByClass($class);
            self::dic()->ctrl()->redirectByClass($class, $cmd);
        }

    }
}
