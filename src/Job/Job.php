<?php

/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see https://github.com/ILIAS-eLearning/ILIAS/tree/trunk/docs/LICENSE */

namespace srag\Plugins\SrFilePatcher\Job;

use srag\Plugins\SrFilePatcher\Config\Config;
use srag\Plugins\SrFilePatcher\Utils\SrFilePatcherTrait;
use ilSrFilePatcherPlugin;
use ilSrFilePatcher;
use ilUtil;
use ilCronJob;
use ilCronJobResult;
use srag\DIC\SrFilePatcher\DICTrait;

/**
 * Class Job
 *
 * Generated by srag\PluginGenerator v0.13.7
 *
 * @package srag\Plugins\SrFilePatcher\Job
 *
 * @author  studer + raimann ag - Team Custom 1 <support-custom1@studer-raimann.ch>
 * @author  studer + raimann ag - Team Core 1 <support-core1@studer-raimann.ch>
 */
class Job extends ilCronJob
{

    use DICTrait;
    use SrFilePatcherTrait;
    const CRON_JOB_ID = "srfp_cron";
    const PLUGIN_CLASS_NAME = ilSrFilePatcherPlugin::class;


    /**
     * Job constructor
     */
    public function __construct()
    {

    }


    /**
     * Get id
     *
     * @return string
     */
    public function getId() : string
    {
        return self::CRON_JOB_ID;
    }


    /**
     * @return string
     */
    public function getTitle() : string
    {
        return ilSrFilePatcherPlugin::PLUGIN_NAME;
    }


    /**
     * @return string
     */
    public function getDescription() : string
    {
        return "";
    }


    /**
     * Is to be activated on "installation"
     *
     * @return boolean
     */
    public function hasAutoActivation() : bool
    {
        return true;
    }


    /**
     * Can the schedule be configured?
     *
     * @return boolean
     */
    public function hasFlexibleSchedule() : bool
    {
        return true;
    }


    /**
     * Get schedule type
     *
     * @return int
     */
    public function getDefaultScheduleType() : int
    {
        return self::SCHEDULE_TYPE_DAILY;
    }


    /**
     * Get schedule value
     *
     * @return int|array
     */
    public function getDefaultScheduleValue()
    {
        return null;
    }


    /**
     * Run job
     *
     * @return ilCronJobResult
     */
    public function run() : ilCronJobResult
    {
        $result = new ilCronJobResult();

        $patching_mode = Config::getField(Config::KEY_PATCHING_MODE);
        $file_patcher = new ilSrFilePatcher();

        if($patching_mode === Config::KEY_MODE_SINGLE_FILE) {
            $file_ref_id = Config::getField(Config::KEY_REF_ID_FILE);
            $file_patcher->patchSingleFile($file_ref_id);
        } elseif ($patching_mode === Config::KEY_MODE_ALL_FILES) {
            $file_patcher->patchAllFiles();
        } else {
            ilUtil::sendFailure(self::dic()->language()->txt("error_no_patching_mode"), true);
        }

        $result->setStatus(ilCronJobResult::STATUS_OK);
        return $result;
    }
}
